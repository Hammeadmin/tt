// src/types.ts

// Import Database type if you are using Supabase generated types
// import type { Database } from './types/database'; // Adjust path as needed

// Define helper types
export type UserRole = 'employer' | 'pharmacist' | 'admin' | 'säljare' | 'egenvårdsrådgivare';
export type ShiftStatus = 'open' | 'filled' | 'cancelled' | 'completed';
export type PayrollStatus = 'pending' | 'processed' | 'paid';
export type AdjustmentType = 'bonus' | 'deduction' | 'expense_reimbursement' | 'other';

// User Profile structure
export interface UserProfile {
  id: string; // Corresponds to auth.users.id
  email: string;
  full_name: string;
  role: UserRole;
  pharmacy_name?: string | null; // Optional: if employer has a pharmacy name
  pharmacy_manager_name?: string | null; // Optional: if employer has a manager name
  hourly_rate?: number | null;
  description?: string | null;
  experience?: string[] | null;
  systems?: string[] | null; // e.g., Apotekssystem, Kassasystem
  created_at: string; // timestamptz
  updated_at?: string | null; // timestamptz
  profile_picture_url?: string | null;

  // Pharmacist/Employee specific fields
  license_verified?: boolean | null;
  license_document?: string | null; // URL or reference to the document

  // Employer specific fields (can be part of UserProfile if role is 'employer')
  street_address?: string | null;
  postal_code?: string | null;
  city?: string | null;
  country?: string | null;
  pharmacy_phone?: string | null;
  pharmacy_contact_email?: string | null;
  // operating_hours might be a separate table or JSONB field
}

// Shift Need structure
export interface ShiftNeed {
  id: string; // uuid
  employer_id: string; // uuid, foreign key to profiles.id
  title: string;
  description?: string | null;
  date: string; // date
  start_time: string; // time without time zone
  end_time: string; // time without time zone
  is_urgent?: boolean | null;
  urgent_pay_adjustment?: number | null; // numeric
  required_experience?: string[] | null; // text[]
  status: ShiftStatus;
  required_role: UserRole | null;
  created_at: string; // timestamptz
  updated_at?: string | null; // timestamptz
  location?: string | null;
  lunch?: string | null; // interval, e.g., '00:30:00' for 30 minutes
  lunch_break_minutes?: number | null; // integer, alternative or derived from lunch interval
  payroll_processed?: boolean | null;
  payroll_record_id?: string | null; // uuid, foreign key to payroll_records.id
  hourly_rate?: number | null; // Can be inherited from employer or set per shift

  // --- THIS IS THE KEY UPDATE ---
  // Related data fetched via joins (as done in lib/shifts.ts)
  employer?: {
    pharmacy_name?: string | null; // Added pharmacy_name
    email?: string | null;        // Added email for completeness if needed
    // You can add other fields from the 'profiles' table here if fetched
  } | null;

  // Optional: Array of applications related to this shift
  shift_applications?: ShiftApplication[] | null; // More specific type than any[]
}

// Shift Application structure (if you want a more specific type than any[])
export interface ShiftApplication {
  id: string; // uuid
  shift_id: string; // uuid
  applicant_id: string; // uuid (references profiles.id of the applicant)
  status: 'pending' | 'accepted' | 'rejected' | 'withdrawn'; // Example statuses
  notes?: string | null;
  applied_at: string; // timestamptz
  // Optional: Include applicant profile details if fetched via joins
  profile?: {
    full_name?: string | null;
    email?: string | null;
    role?: UserRole | null;
    // other relevant applicant details
  } | null;
}


// Assuming Database types are generated by Supabase CLI (if not, define manually)
// Example: import { Database } from './database.types'; // Adjust path
// If not using generated types, you'll need to define these based on your table structure.
// For now, using a placeholder to avoid breaking the existing structure.
type Database = { public: { Tables: any } };

export interface Schedule {
  id: string;
  posting_id: string;
  day: number; // Represents the day of the week, e.g., 1 for Monday.
  start: string; // Time in "HH:mm:ss" format.
  end: string;   // Time in "HH:mm:ss" format.
}

export interface JobPosting {
  id: string;
  created_at: string;
  title: string;
  description?: string;
  employer_id: string;
  employer_name?: string; // This might come from a join
  status?: 'open' | 'filled' | 'completed' | 'cancelled';
  location?: string;
  period_start_date?: string;
  period_end_date?: string;
  required_role?: UserRole;
  estimated_hours?: string;
  salary_description?: string;
  required_experience?: string[];
  payroll_processed?: boolean;
  assigned_applicant_id?: string | null;

  // --- ADD/UPDATE THESE FIELDS ---
  // These fields are new or might have been missing.
  // The 'schedules' property is now defined as an array of Schedule objects.
  hourly_rate?: number | null;
  schedules?: Schedule[] | null;
  // --- END OF ADDED/UPDATED FIELDS ---

  // This is for nested employer data, which your queries already fetch.
  employer?: {
    full_name?: string | null;
  };
}

// Job Posting structure (ensure this matches your DB table)
export type JobPosting = Database['public']['Tables']['job_postings']['Row'] & {
  employer?: {
    employer_name?: string | null;
    pharmacy_name?: string | null; // Good to have
    email?: string | null;
  } | null;
  // job_posting_applications?: JobPostingApplication[]; // If you fetch applications with postings
};

// Job Posting Application structure (ensure this matches your DB table)
export type JobPostingApplication = Database['public']['Tables']['job_posting_applications']['Row'] & {
  profile?: { // Applicant's profile
    full_name?: string | null;
    email?: string | null;
    role?: UserRole | null;
  } | null;
  job_posting?: { // Details of the posting applied to
    id?: string;
    title?: string | null;
    period_start_date?: string | null;
    period_end_date?: string | null;
    employer_id?: string;
  } | null;
};


// Structure for creating shifts with multiple dates (used in forms)
export interface ShiftDate {
  date: string; // YYYY-MM-DD
  start_time: string; // HH:MM:SS
  end_time: string; // HH:MM:SS
}

// Structure for Auth form data
export interface AuthFormData {
  email: string;
  password: string;
  role?: UserRole;
  full_name?: string;
  pharmacy_name?: string; // Added for employer signup
}

// Structure for Analytics Data (example, expand as needed)
export interface AnalyticsData {
  monthlyStats: { month: string; totalShifts: number; filledShifts: number }[];
  applicationStats: { date: string; count: number }[];
  ratingDistribution: { rating: number; count: number }[];
}

// Structure for Payroll Records
export interface PayrollRecord {
  id: string; // uuid
  user_id: string; // uuid (employee's ID)
  shift_id: string | null; // uuid (can be null for manual period adjustments)
  pay_period: string; // e.g., "YYYY-MM"
  hours_worked: number | null;
  hourly_rate: number | null;
  total_pay: number | null; // Gross pay
  status: PayrollStatus;
  created_at: string; // timestamptz
  processed_at?: string | null; // timestamptz
  total_ob_premium?: number | null;
  ob_details?: Record<string, number> | null; // JSONB: e.g., {"ob50": 2.5, "ob100": 1.0}
  adjustments?: PayrollAdjustment[] | null; // JSONB: Array of adjustment objects
  net_adjustments?: number | null; // Sum of all adjustment amounts

  // Optional related data for display
  employeeName?: string | null; // From profiles table
  employeeEmail?: string | null; // From profiles table
  shiftDate?: string | null; // From shifts table
  shiftTitle?: string | null; // From shifts table
  employer_id?: string | null; // From shifts table
  employer_name?: string | null; // From shifts -> profiles table
}

// Individual Payroll Adjustment (part of PayrollRecord.adjustments JSONB)
export interface PayrollAdjustment {
  reason: string;
  amount: number; // Positive for bonus/reimbursement, negative for deduction
  type: AdjustmentType; // For categorization
  notes?: string;
}

// For employer_manual_staff table
export interface ManualStaffMember extends Database['public']['Tables']['employer_manual_staff']['Row'] {
  // hourly_rate is already in the Row type if defined in DB
  // ob_modifier fields are also in Row type if defined in DB
  // Add any client-side computed fields or specific presentation fields if needed
}

// For schedule preview and payroll estimation from schedules
export interface ScheduledShiftPayrollItem {
  schedule_shift_id: string; // ID from the schedule_shifts table
  schedule_id: string; // ID of the parent schedule
  schedule_name?: string | null; // Name of the schedule
  shift_date: string; // YYYY-MM-DD
  start_time: string; // HH:MM:SS
  end_time: string; // HH:MM:SS
  employee_id: string | null; // UUID of the assigned employee (from profiles or manual_staff)
  employee_name: string | null;
  is_manual_employee: boolean; // To distinguish between platform users and manually added staff
  role: UserRole | string; // Role for the shift
  hours_planned: number;
  base_rate?: number | null;
  estimated_base_pay: number;
  is_holiday_shift?: boolean | null;
  ob_type?: string | null; // e.g., "evening", "weekend", "holiday"
  estimated_ob_pay?: number | null;
  estimated_total_pay: number;
  notes?: string | null;
}

export interface AggregatedSchedulePayroll {
  employee_id: string; // Can be platform user ID or manual staff ID
  employee_name: string;
  is_manual_employee: boolean;
  total_shifts: number;
  total_hours_planned: number;
  total_estimated_base_pay: number;
  total_estimated_ob_pay: number;
  total_estimated_pay: number;
  shifts: ScheduledShiftPayrollItem[];
}

// Structure for Notifications
export interface Notification {
  id: string; // uuid
  user_id: string; // uuid (recipient)
  title: string;
  message: string;
  type: string; // e.g., 'new_application', 'shift_update', 'message_received', 'review_request'
  read: boolean;
  created_at: string; // timestamptz
  related_id?: string | null; // e.g., shift_id, application_id, conversation_id
  related_table?: string | null; // e.g., 'shift_needs', 'shift_applications'
  sender_id?: string | null; // uuid (user who triggered the notification, if applicable)
  sender_name?: string | null; // Name of the sender for display
}

// Structure for Conversation Participants (used in MessagesPanel)
export interface Participant {
  user_id: string; // uuid
  full_name: string;
  role: UserRole | string; // Use UserRole if it's always a platform user
  profile_picture_url?: string | null;
}

// Structure for Messages (used in MessagesPanel)
export interface Message {
  id: string; // uuid
  conversation_id: string; // uuid
  sender_id: string; // uuid
  content: string;
  created_at: string; // timestamptz
  read_at?: string | null; // timestamptz, to know when the recipient read it
}

// Structure for Conversations (used in MessagesPanel)
export interface Conversation {
  id: string; // uuid
  created_at: string; // timestamptz
  updated_at: string; // timestamptz (timestamp of last message)
  participants: Participant[]; // Should be an array of participant profiles/details
  last_message?: Message | null;
  unread_count?: number; // Specific to the current viewing user
}
